package persistence.sql.ddl.generator;


import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import persistence.sql.ddl.generator.fixture.PersonV1;
import persistence.sql.ddl.generator.fixture.PersonV2;
import persistence.sql.ddl.generator.fixture.PersonV2WithColumnName;
import persistence.sql.ddl.generator.fixture.PersonV2WithGeneratedValue;
import persistence.sql.ddl.generator.fixture.PersonV2WithNotNullConstraint;
import persistence.sql.ddl.generator.fixture.PersonV3;
import persistence.sql.ddl.generator.fixture.PersonV3WithTable;
import persistence.sql.ddl.generator.fixture.PersonV3WithTransient;
import persistence.sql.dialect.H2ColumnType;
import registry.EntityMetaRegistry;

@DisplayName("CREATE DDL 생성 테스트")
class CreateDDLQueryGeneratorTest {

    private final CreateDDLQueryGenerator createDDLQueryGenerator = new CreateDDLQueryGenerator();
    private static final EntityMetaRegistry entityMetaRegistry = EntityMetaRegistry.of(new H2ColumnType());

    @BeforeAll
    static void setUp() {
        entityMetaRegistry.addEntityMeta(PersonV1.class);
        entityMetaRegistry.addEntityMeta(PersonV2.class);
        entityMetaRegistry.addEntityMeta(PersonV2WithColumnName.class);
        entityMetaRegistry.addEntityMeta(PersonV2WithNotNullConstraint.class);
        entityMetaRegistry.addEntityMeta(PersonV2WithGeneratedValue.class);
        entityMetaRegistry.addEntityMeta(PersonV3.class);
        entityMetaRegistry.addEntityMeta(PersonV3WithTable.class);
        entityMetaRegistry.addEntityMeta(PersonV3WithTransient.class);
    }

    @Nested
    @DisplayName("[요구사항 1]에 대한 엔티티에 대한 DDL을 생성할 수 있다.")
    class createDDlFromEntity_1 {

        @Test
        @DisplayName("@Entity 어노테이션이 적용된 Class 대해 DDL을 생성할 수 있다.")
        public void canCreateDDlFromEntityWithEntityAnnotation() {
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(PersonV1.class));
            assertThat(ddl).isEqualTo("CREATE TABLE PERSONV1 (id bigint PRIMARY KEY, name varchar, age integer);");
        }
    }

    @Nested
    @DisplayName("[요구사항 2]에 대한 엔티티에 대한 DDL을 생성할 수 있다.")
    class createDDlFromEntity_2 {

        @Test
        @DisplayName("@GeneratedValue와 @Column의 속성을 선택하여 DDL을 생성할 수 있다.")
        void canCreateDDlWithGeneratedValueAndColumn() {
            final Class<PersonV2> testClazz = PersonV2.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE PERSONV2 (id bigint generated by default as identity PRIMARY KEY, nick_name varchar, old integer, email varchar NOT NULL);");
        }

        @Test
        @DisplayName("@GeneratedValue의 strategy에 따라 PrimaryKey에 대한 생성 전략을 지정할 수 있다.")
        public void createDDlFromEntityWithGeneratedValueStrategy() {
            final Class<PersonV2WithGeneratedValue> testClazz = PersonV2WithGeneratedValue.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE PERSONV2WITHGENERATEDVALUE (id bigint generated by default as identity PRIMARY KEY, name varchar, age integer, email varchar);");
        }

        @Test
        @DisplayName("@Column의 name을 통해 컬럼명을 커스텀할 수 있다.")
        public void createDDlFromEntityWithColumnName() {
            final Class<PersonV2WithColumnName> testClazz = PersonV2WithColumnName.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE PERSONV2WITHCOLUMNNAME (id bigint PRIMARY KEY, nick_name varchar, old integer, email_contact varchar);");
        }

        @Test
        @DisplayName("@Column에 Not Null 제약조건을 추가할 수 있다.")
        public void createDDlFromNotNullConstraint() {
            final Class<PersonV2WithNotNullConstraint> testClazz = PersonV2WithNotNullConstraint.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE PERSONV2WITHNOTNULLCONSTRAINT (id bigint PRIMARY KEY, name varchar, age integer, email varchar NOT NULL);");
        }
    }

    @Nested
    @DisplayName("[요구사항 3]에 대한 엔티티에 대한 DDL을 생성할 수 있다.")
    class createDDlFromEntity_3 {

        @Test
        @DisplayName("@Table과 @Transient를 적용하여 DDL을 생성할 수 있다.")
        void canCreateDDlWithTableAndTransientAnnotation() {
            final Class<PersonV3> testClazz = PersonV3.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE USERS (id bigint generated by default as identity PRIMARY KEY, nick_name varchar, old integer, email varchar NOT NULL);");
        }

        @Test
        @DisplayName("@Table의 속성을 지정하여 Table 이름을 수정할 수 있다.")
        void canCreateDDlWithTable() {
            final Class<PersonV3WithTable> testClazz = PersonV3WithTable.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE USERS (id bigint PRIMARY KEY, name varchar, age integer, email varchar);");
        }

        @Test
        @DisplayName("@Transient를 통하여 DDL 생성시 제외시킬 수 있다.")
        void canCreateDDlWithTransient() {
            final Class<PersonV3WithTransient> testClazz = PersonV3WithTransient.class;
            final String ddl = createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz));
            assertThat(ddl).isEqualTo(
                "CREATE TABLE PERSONV3WITHTRANSIENT (id bigint PRIMARY KEY, name varchar, age integer, email varchar);");
        }
    }
}
