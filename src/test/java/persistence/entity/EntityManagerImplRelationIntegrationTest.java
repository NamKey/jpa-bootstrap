package persistence.entity;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

import database.DatabaseServer;
import database.H2;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.entity.impl.EntityManagerFactory;
import persistence.sql.ddl.generator.CreateDDLQueryGenerator;
import persistence.sql.ddl.generator.DropDDLQueryGenerator;
import persistence.sql.dialect.H2Dialect;
import persistence.sql.dml.Database;
import persistence.sql.dml.JdbcTemplate;
import persistence.sql.dml.statement.InsertStatementBuilder;
import registry.EntityMetaRegistry;

@DisplayName("EntityManager 관계 통합 테스트")
class EntityManagerImplRelationIntegrationTest {

    private EntityManager entityManager;

    private static DatabaseServer server;
    private static EntityMetaRegistry entityMetaRegistry;
    private static final Class<?> testClazz = Order.class;
    private static Database jdbcTemplate;
    private static EntityManagerFactory entityManagerFactory;

    @BeforeAll
    static void setServer() throws SQLException {
        server = new H2();
        server.start();
        Connection connection = server.getConnection();
        entityMetaRegistry = EntityMetaRegistry.of(new H2Dialect());
        entityMetaRegistry.addEntityMeta(testClazz);
        entityMetaRegistry.addEntityMeta(OrderItem.class);
        entityManagerFactory = new EntityManagerFactory(connection, entityMetaRegistry);
    }

    @BeforeEach
    void setUp() throws SQLException {
        entityManager = entityManagerFactory.openSession();

        jdbcTemplate = new JdbcTemplate(server.getConnection());
        CreateDDLQueryGenerator createDDLQueryGenerator = new CreateDDLQueryGenerator();
        jdbcTemplate.execute(createDDLQueryGenerator.create(entityMetaRegistry.getEntityMeta(testClazz)));

        jdbcTemplate.execute(
            "CREATE TABLE ORDER_ITEMS (id bigint generated by default as identity PRIMARY KEY, order_id bigint, product varchar, quantity integer);");
    }

    @AfterEach
    void tearDown() {
        DropDDLQueryGenerator dropDDLQueryGenerator = new DropDDLQueryGenerator();
        jdbcTemplate.execute(dropDDLQueryGenerator.drop(Order.class));
        jdbcTemplate.execute("DROP TABLE ORDER_ITEMS");
    }

    @Test
    @DisplayName("EntityManager를 통해 ID로 원하는 자식 Entity를 갖고 있는 Entity를 갖고 올 수 있다.")
    void selectFindById() {
        //given
        InsertStatementBuilder insertStatementBuilder = new InsertStatementBuilder();
        Order person1 = new Order("유저1", 20, "user1@jpa.com");

        final String order1Insert = insertStatementBuilder.insert(person1, entityMetaRegistry.getEntityMeta(person1.getClass()));

        jdbcTemplate.execute(order1Insert);
        jdbcTemplate.execute("INSERT INTO ORDER_ITEMS (order_id, product, quantity) VALUES (1L, 'product1', 2)");
        jdbcTemplate.execute("INSERT INTO ORDER_ITEMS (order_id, product, quantity) VALUES (1L, 'product2', 3)");
        jdbcTemplate.execute("INSERT INTO ORDER_ITEMS (order_id, product, quantity) VALUES (1L, 'product3', 4)");
        jdbcTemplate.execute("INSERT INTO ORDER_ITEMS (order_id, product, quantity) VALUES (1L, 'product4', 5)");

        final Order order = entityManager.find(Order.class, 1L);
        assertAll(
            () -> assertThat(order.getId()).isEqualTo(1L),
            () -> assertThat(order.getAge()).isEqualTo(20),
            () -> assertThat(order.getEmail()).isEqualTo("user1@jpa.com"),
            () -> assertThat(order.getOrderItems().size()).isEqualTo(4)
        );
    }

    @Entity
    @Table(name = "orders")
    public static class Order {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column(name = "nick_name")
        private String name;

        @Column(name = "old")
        private Integer age;

        @Column(nullable = false)
        private String email;

        @OneToMany(fetch = FetchType.EAGER)
        @JoinColumn(name = "order_id")
        private List<OrderItem> orderItems = new ArrayList<>();

        public Order(String name, Integer age, String email) {
            this.name = name;
            this.age = age;
            this.email = email;
        }

        protected Order() {

        }

        public Long getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public Integer getAge() {
            return age;
        }

        public String getEmail() {
            return email;
        }

        public List<OrderItem> getOrderItems() {
            return orderItems;
        }
    }

    @Entity
    @Table(name = "order_items")
    private static class OrderItem {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        private String product;

        private Integer quantity;
    }
}
